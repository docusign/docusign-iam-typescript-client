/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkspaceSummary = {
  /**
   * The ID of the workspace
   */
  workspaceId?: string | undefined;
  /**
   * The name of the workspace
   */
  name?: string | null | undefined;
  /**
   * The date the workspace was created
   */
  createdDate?: Date | null | undefined;
  /**
   * The ID of the user who created the workspace
   */
  createdByUserId?: string | undefined;
};

/** @internal */
export const WorkspaceSummary$inboundSchema: z.ZodType<
  WorkspaceSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  created_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_by_user_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "created_date": "createdDate",
    "created_by_user_id": "createdByUserId",
  });
});

/** @internal */
export type WorkspaceSummary$Outbound = {
  workspace_id?: string | undefined;
  name?: string | null | undefined;
  created_date?: string | null | undefined;
  created_by_user_id?: string | undefined;
};

/** @internal */
export const WorkspaceSummary$outboundSchema: z.ZodType<
  WorkspaceSummary$Outbound,
  z.ZodTypeDef,
  WorkspaceSummary
> = z.object({
  workspaceId: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  createdDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdByUserId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    createdDate: "created_date",
    createdByUserId: "created_by_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceSummary$ {
  /** @deprecated use `WorkspaceSummary$inboundSchema` instead. */
  export const inboundSchema = WorkspaceSummary$inboundSchema;
  /** @deprecated use `WorkspaceSummary$outboundSchema` instead. */
  export const outboundSchema = WorkspaceSummary$outboundSchema;
  /** @deprecated use `WorkspaceSummary$Outbound` instead. */
  export type Outbound = WorkspaceSummary$Outbound;
}

export function workspaceSummaryToJSON(
  workspaceSummary: WorkspaceSummary,
): string {
  return JSON.stringify(
    WorkspaceSummary$outboundSchema.parse(workspaceSummary),
  );
}

export function workspaceSummaryFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceSummary' from JSON`,
  );
}
