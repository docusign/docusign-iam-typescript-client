/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkspaceUserForCreate = {
  /**
   * The email address of the added user. May be an internal user to the account or an external user
   */
  email: string;
  /**
   * The first name of the added user
   */
  firstName: string;
  /**
   * The last name of the added user
   */
  lastName: string;
  /**
   * The optional Role ID to assign to the user. Defaults to the "Participate" role
   */
  roleId?: string | null | undefined;
};

/** @internal */
export const WorkspaceUserForCreate$inboundSchema: z.ZodType<
  WorkspaceUserForCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  first_name: z.string(),
  last_name: z.string(),
  role_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "role_id": "roleId",
  });
});

/** @internal */
export type WorkspaceUserForCreate$Outbound = {
  email: string;
  first_name: string;
  last_name: string;
  role_id?: string | null | undefined;
};

/** @internal */
export const WorkspaceUserForCreate$outboundSchema: z.ZodType<
  WorkspaceUserForCreate$Outbound,
  z.ZodTypeDef,
  WorkspaceUserForCreate
> = z.object({
  email: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  roleId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    roleId: "role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceUserForCreate$ {
  /** @deprecated use `WorkspaceUserForCreate$inboundSchema` instead. */
  export const inboundSchema = WorkspaceUserForCreate$inboundSchema;
  /** @deprecated use `WorkspaceUserForCreate$outboundSchema` instead. */
  export const outboundSchema = WorkspaceUserForCreate$outboundSchema;
  /** @deprecated use `WorkspaceUserForCreate$Outbound` instead. */
  export type Outbound = WorkspaceUserForCreate$Outbound;
}

export function workspaceUserForCreateToJSON(
  workspaceUserForCreate: WorkspaceUserForCreate,
): string {
  return JSON.stringify(
    WorkspaceUserForCreate$outboundSchema.parse(workspaceUserForCreate),
  );
}

export function workspaceUserForCreateFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceUserForCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceUserForCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceUserForCreate' from JSON`,
  );
}
