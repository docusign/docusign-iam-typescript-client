/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkspaceUploadRequestAssignment,
  WorkspaceUploadRequestAssignment$inboundSchema,
  WorkspaceUploadRequestAssignment$Outbound,
  WorkspaceUploadRequestAssignment$outboundSchema,
} from "./workspaceuploadrequestassignment.js";
import {
  WorkspaceUploadRequestDocument,
  WorkspaceUploadRequestDocument$inboundSchema,
  WorkspaceUploadRequestDocument$Outbound,
  WorkspaceUploadRequestDocument$outboundSchema,
} from "./workspaceuploadrequestdocument.js";
import {
  WorkspaceUploadRequestOwner,
  WorkspaceUploadRequestOwner$inboundSchema,
  WorkspaceUploadRequestOwner$Outbound,
  WorkspaceUploadRequestOwner$outboundSchema,
} from "./workspaceuploadrequestowner.js";
import {
  WorkspaceUploadRequestStatus,
  WorkspaceUploadRequestStatus$inboundSchema,
  WorkspaceUploadRequestStatus$outboundSchema,
} from "./workspaceuploadrequeststatus.js";

/**
 * Upload request details for update operations
 */
export type UpdateWorkspaceUploadRequestBody = {
  /**
   * The ID of the upload request
   */
  uploadRequestId?: string | null | undefined;
  /**
   * The ID of the workspace
   */
  workspaceId?: string | null | undefined;
  /**
   * The name of the upload request (editable)
   */
  name: string | null;
  /**
   * The description of the upload request (editable)
   */
  description: string | null;
  uploadRequestOwner?: WorkspaceUploadRequestOwner | undefined;
  /**
   * Enum representing the status of a workspace upload request
   */
  status: WorkspaceUploadRequestStatus;
  /**
   * List of documents associated with the upload request
   */
  documents?: Array<WorkspaceUploadRequestDocument> | null | undefined;
  /**
   * List of user assignments for the upload request
   */
  assignments?: Array<WorkspaceUploadRequestAssignment> | null | undefined;
  /**
   * The date the upload request was created
   */
  createdDate?: string | null | undefined;
  /**
   * The date the upload request was last updated
   */
  updatedDate?: string | null | undefined;
  /**
   * The due date for the upload request (editable)
   */
  dueDate: string | null;
  /**
   * The date the upload request was sent
   */
  sentDate?: string | null | undefined;
  /**
   * The date the upload request was completed
   */
  completedDate?: string | null | undefined;
  /**
   * Whether the current user can view the upload request
   */
  canView?: boolean | null | undefined;
  /**
   * Whether the current user can edit the upload request
   */
  canEdit?: boolean | null | undefined;
  /**
   * Whether the current user can delete the upload request
   */
  canDelete?: boolean | null | undefined;
};

/** @internal */
export const UpdateWorkspaceUploadRequestBody$inboundSchema: z.ZodType<
  UpdateWorkspaceUploadRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  upload_request_id: z.nullable(z.string()).optional(),
  workspace_id: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  upload_request_owner: WorkspaceUploadRequestOwner$inboundSchema.optional(),
  status: WorkspaceUploadRequestStatus$inboundSchema,
  documents: z.nullable(z.array(WorkspaceUploadRequestDocument$inboundSchema))
    .optional(),
  assignments: z.nullable(
    z.array(WorkspaceUploadRequestAssignment$inboundSchema),
  ).optional(),
  created_date: z.nullable(z.string()).optional(),
  updated_date: z.nullable(z.string()).optional(),
  due_date: z.nullable(z.string()),
  sent_date: z.nullable(z.string()).optional(),
  completed_date: z.nullable(z.string()).optional(),
  can_view: z.nullable(z.boolean()).optional(),
  can_edit: z.nullable(z.boolean()).optional(),
  can_delete: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "upload_request_id": "uploadRequestId",
    "workspace_id": "workspaceId",
    "upload_request_owner": "uploadRequestOwner",
    "created_date": "createdDate",
    "updated_date": "updatedDate",
    "due_date": "dueDate",
    "sent_date": "sentDate",
    "completed_date": "completedDate",
    "can_view": "canView",
    "can_edit": "canEdit",
    "can_delete": "canDelete",
  });
});

/** @internal */
export type UpdateWorkspaceUploadRequestBody$Outbound = {
  upload_request_id?: string | null | undefined;
  workspace_id?: string | null | undefined;
  name: string | null;
  description: string | null;
  upload_request_owner?: WorkspaceUploadRequestOwner$Outbound | undefined;
  status: string;
  documents?: Array<WorkspaceUploadRequestDocument$Outbound> | null | undefined;
  assignments?:
    | Array<WorkspaceUploadRequestAssignment$Outbound>
    | null
    | undefined;
  created_date?: string | null | undefined;
  updated_date?: string | null | undefined;
  due_date: string | null;
  sent_date?: string | null | undefined;
  completed_date?: string | null | undefined;
  can_view?: boolean | null | undefined;
  can_edit?: boolean | null | undefined;
  can_delete?: boolean | null | undefined;
};

/** @internal */
export const UpdateWorkspaceUploadRequestBody$outboundSchema: z.ZodType<
  UpdateWorkspaceUploadRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateWorkspaceUploadRequestBody
> = z.object({
  uploadRequestId: z.nullable(z.string()).optional(),
  workspaceId: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  uploadRequestOwner: WorkspaceUploadRequestOwner$outboundSchema.optional(),
  status: WorkspaceUploadRequestStatus$outboundSchema,
  documents: z.nullable(z.array(WorkspaceUploadRequestDocument$outboundSchema))
    .optional(),
  assignments: z.nullable(
    z.array(WorkspaceUploadRequestAssignment$outboundSchema),
  ).optional(),
  createdDate: z.nullable(z.string()).optional(),
  updatedDate: z.nullable(z.string()).optional(),
  dueDate: z.nullable(z.string()),
  sentDate: z.nullable(z.string()).optional(),
  completedDate: z.nullable(z.string()).optional(),
  canView: z.nullable(z.boolean()).optional(),
  canEdit: z.nullable(z.boolean()).optional(),
  canDelete: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    uploadRequestId: "upload_request_id",
    workspaceId: "workspace_id",
    uploadRequestOwner: "upload_request_owner",
    createdDate: "created_date",
    updatedDate: "updated_date",
    dueDate: "due_date",
    sentDate: "sent_date",
    completedDate: "completed_date",
    canView: "can_view",
    canEdit: "can_edit",
    canDelete: "can_delete",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWorkspaceUploadRequestBody$ {
  /** @deprecated use `UpdateWorkspaceUploadRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateWorkspaceUploadRequestBody$inboundSchema;
  /** @deprecated use `UpdateWorkspaceUploadRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateWorkspaceUploadRequestBody$outboundSchema;
  /** @deprecated use `UpdateWorkspaceUploadRequestBody$Outbound` instead. */
  export type Outbound = UpdateWorkspaceUploadRequestBody$Outbound;
}

export function updateWorkspaceUploadRequestBodyToJSON(
  updateWorkspaceUploadRequestBody: UpdateWorkspaceUploadRequestBody,
): string {
  return JSON.stringify(
    UpdateWorkspaceUploadRequestBody$outboundSchema.parse(
      updateWorkspaceUploadRequestBody,
    ),
  );
}

export function updateWorkspaceUploadRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWorkspaceUploadRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWorkspaceUploadRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWorkspaceUploadRequestBody' from JSON`,
  );
}
