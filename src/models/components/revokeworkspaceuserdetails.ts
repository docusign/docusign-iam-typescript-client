/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RevokeWorkspaceUserDetails = {
  /**
   * The optional date in the future to initiate the revocation. If not specified, the revocation will be immediate
   */
  revocationDate?: Date | null | undefined;
};

/** @internal */
export const RevokeWorkspaceUserDetails$inboundSchema: z.ZodType<
  RevokeWorkspaceUserDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  revocation_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "revocation_date": "revocationDate",
  });
});

/** @internal */
export type RevokeWorkspaceUserDetails$Outbound = {
  revocation_date?: string | null | undefined;
};

/** @internal */
export const RevokeWorkspaceUserDetails$outboundSchema: z.ZodType<
  RevokeWorkspaceUserDetails$Outbound,
  z.ZodTypeDef,
  RevokeWorkspaceUserDetails
> = z.object({
  revocationDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    revocationDate: "revocation_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RevokeWorkspaceUserDetails$ {
  /** @deprecated use `RevokeWorkspaceUserDetails$inboundSchema` instead. */
  export const inboundSchema = RevokeWorkspaceUserDetails$inboundSchema;
  /** @deprecated use `RevokeWorkspaceUserDetails$outboundSchema` instead. */
  export const outboundSchema = RevokeWorkspaceUserDetails$outboundSchema;
  /** @deprecated use `RevokeWorkspaceUserDetails$Outbound` instead. */
  export type Outbound = RevokeWorkspaceUserDetails$Outbound;
}

export function revokeWorkspaceUserDetailsToJSON(
  revokeWorkspaceUserDetails: RevokeWorkspaceUserDetails,
): string {
  return JSON.stringify(
    RevokeWorkspaceUserDetails$outboundSchema.parse(revokeWorkspaceUserDetails),
  );
}

export function revokeWorkspaceUserDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RevokeWorkspaceUserDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RevokeWorkspaceUserDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RevokeWorkspaceUserDetails' from JSON`,
  );
}
