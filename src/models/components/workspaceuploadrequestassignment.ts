/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkspaceUploadRequestResponsibilityType,
  WorkspaceUploadRequestResponsibilityType$inboundSchema,
  WorkspaceUploadRequestResponsibilityType$outboundSchema,
} from "./workspaceuploadrequestresponsibilitytype.js";

export type WorkspaceUploadRequestAssignment = {
  /**
   * The ID of the assigned user
   */
  assigneeUserId: string;
  /**
   * Enum representing the responsibility type for a workspace upload request assignment
   */
  uploadRequestResponsibilityTypeId?:
    | WorkspaceUploadRequestResponsibilityType
    | undefined;
};

/** @internal */
export const WorkspaceUploadRequestAssignment$inboundSchema: z.ZodType<
  WorkspaceUploadRequestAssignment,
  z.ZodTypeDef,
  unknown
> = z.object({
  assignee_user_id: z.string(),
  upload_request_responsibility_type_id:
    WorkspaceUploadRequestResponsibilityType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "assignee_user_id": "assigneeUserId",
    "upload_request_responsibility_type_id":
      "uploadRequestResponsibilityTypeId",
  });
});

/** @internal */
export type WorkspaceUploadRequestAssignment$Outbound = {
  assignee_user_id: string;
  upload_request_responsibility_type_id?: string | undefined;
};

/** @internal */
export const WorkspaceUploadRequestAssignment$outboundSchema: z.ZodType<
  WorkspaceUploadRequestAssignment$Outbound,
  z.ZodTypeDef,
  WorkspaceUploadRequestAssignment
> = z.object({
  assigneeUserId: z.string(),
  uploadRequestResponsibilityTypeId:
    WorkspaceUploadRequestResponsibilityType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    assigneeUserId: "assignee_user_id",
    uploadRequestResponsibilityTypeId: "upload_request_responsibility_type_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceUploadRequestAssignment$ {
  /** @deprecated use `WorkspaceUploadRequestAssignment$inboundSchema` instead. */
  export const inboundSchema = WorkspaceUploadRequestAssignment$inboundSchema;
  /** @deprecated use `WorkspaceUploadRequestAssignment$outboundSchema` instead. */
  export const outboundSchema = WorkspaceUploadRequestAssignment$outboundSchema;
  /** @deprecated use `WorkspaceUploadRequestAssignment$Outbound` instead. */
  export type Outbound = WorkspaceUploadRequestAssignment$Outbound;
}

export function workspaceUploadRequestAssignmentToJSON(
  workspaceUploadRequestAssignment: WorkspaceUploadRequestAssignment,
): string {
  return JSON.stringify(
    WorkspaceUploadRequestAssignment$outboundSchema.parse(
      workspaceUploadRequestAssignment,
    ),
  );
}

export function workspaceUploadRequestAssignmentFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceUploadRequestAssignment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceUploadRequestAssignment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceUploadRequestAssignment' from JSON`,
  );
}
