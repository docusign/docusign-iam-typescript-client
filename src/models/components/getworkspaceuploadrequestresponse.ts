/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkspaceUploadRequestAssignment,
  WorkspaceUploadRequestAssignment$inboundSchema,
  WorkspaceUploadRequestAssignment$Outbound,
  WorkspaceUploadRequestAssignment$outboundSchema,
} from "./workspaceuploadrequestassignment.js";
import {
  WorkspaceUploadRequestDocument,
  WorkspaceUploadRequestDocument$inboundSchema,
  WorkspaceUploadRequestDocument$Outbound,
  WorkspaceUploadRequestDocument$outboundSchema,
} from "./workspaceuploadrequestdocument.js";
import {
  WorkspaceUploadRequestOwner,
  WorkspaceUploadRequestOwner$inboundSchema,
  WorkspaceUploadRequestOwner$Outbound,
  WorkspaceUploadRequestOwner$outboundSchema,
} from "./workspaceuploadrequestowner.js";
import {
  WorkspaceUploadRequestStatus,
  WorkspaceUploadRequestStatus$inboundSchema,
  WorkspaceUploadRequestStatus$outboundSchema,
} from "./workspaceuploadrequeststatus.js";

/**
 * Upload request details - single upload request response
 */
export type GetWorkspaceUploadRequestResponse = {
  /**
   * The ID of the upload request
   */
  uploadRequestId: string;
  /**
   * The ID of the workspace
   */
  workspaceId: string;
  /**
   * The name of the upload request
   */
  name: string | null;
  /**
   * The description of the upload request
   */
  description?: string | null | undefined;
  uploadRequestOwner: WorkspaceUploadRequestOwner;
  /**
   * Enum representing the status of a workspace upload request
   */
  status: WorkspaceUploadRequestStatus;
  /**
   * List of documents associated with the upload request
   */
  documents: Array<WorkspaceUploadRequestDocument> | null;
  /**
   * List of user assignments for the upload request
   */
  assignments: Array<WorkspaceUploadRequestAssignment> | null;
  /**
   * The date the upload request was created
   */
  createdDate: Date;
  /**
   * The date the upload request was last updated
   */
  updatedDate: Date;
  /**
   * The due date for the upload request
   */
  dueDate?: Date | null | undefined;
  /**
   * The date the upload request was sent
   */
  sentDate?: Date | null | undefined;
  /**
   * The date the upload request was completed
   */
  completedDate?: Date | null | undefined;
  /**
   * Whether the current user can view the upload request
   */
  canView: boolean;
  /**
   * Whether the current user can edit the upload request
   */
  canEdit: boolean;
  /**
   * Whether the current user can delete the upload request
   */
  canDelete: boolean;
};

/** @internal */
export const GetWorkspaceUploadRequestResponse$inboundSchema: z.ZodType<
  GetWorkspaceUploadRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  upload_request_id: z.string(),
  workspace_id: z.string(),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  upload_request_owner: WorkspaceUploadRequestOwner$inboundSchema,
  status: WorkspaceUploadRequestStatus$inboundSchema,
  documents: z.nullable(z.array(WorkspaceUploadRequestDocument$inboundSchema)),
  assignments: z.nullable(
    z.array(WorkspaceUploadRequestAssignment$inboundSchema),
  ),
  created_date: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  updated_date: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  due_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  sent_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  completed_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  can_view: z.boolean(),
  can_edit: z.boolean(),
  can_delete: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "upload_request_id": "uploadRequestId",
    "workspace_id": "workspaceId",
    "upload_request_owner": "uploadRequestOwner",
    "created_date": "createdDate",
    "updated_date": "updatedDate",
    "due_date": "dueDate",
    "sent_date": "sentDate",
    "completed_date": "completedDate",
    "can_view": "canView",
    "can_edit": "canEdit",
    "can_delete": "canDelete",
  });
});

/** @internal */
export type GetWorkspaceUploadRequestResponse$Outbound = {
  upload_request_id: string;
  workspace_id: string;
  name: string | null;
  description?: string | null | undefined;
  upload_request_owner: WorkspaceUploadRequestOwner$Outbound;
  status: string;
  documents: Array<WorkspaceUploadRequestDocument$Outbound> | null;
  assignments: Array<WorkspaceUploadRequestAssignment$Outbound> | null;
  created_date: string;
  updated_date: string;
  due_date?: string | null | undefined;
  sent_date?: string | null | undefined;
  completed_date?: string | null | undefined;
  can_view: boolean;
  can_edit: boolean;
  can_delete: boolean;
};

/** @internal */
export const GetWorkspaceUploadRequestResponse$outboundSchema: z.ZodType<
  GetWorkspaceUploadRequestResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceUploadRequestResponse
> = z.object({
  uploadRequestId: z.string(),
  workspaceId: z.string(),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()).optional(),
  uploadRequestOwner: WorkspaceUploadRequestOwner$outboundSchema,
  status: WorkspaceUploadRequestStatus$outboundSchema,
  documents: z.nullable(z.array(WorkspaceUploadRequestDocument$outboundSchema)),
  assignments: z.nullable(
    z.array(WorkspaceUploadRequestAssignment$outboundSchema),
  ),
  createdDate: z.date().transform(v => v.toISOString()),
  updatedDate: z.date().transform(v => v.toISOString()),
  dueDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  sentDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  completedDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  canView: z.boolean(),
  canEdit: z.boolean(),
  canDelete: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    uploadRequestId: "upload_request_id",
    workspaceId: "workspace_id",
    uploadRequestOwner: "upload_request_owner",
    createdDate: "created_date",
    updatedDate: "updated_date",
    dueDate: "due_date",
    sentDate: "sent_date",
    completedDate: "completed_date",
    canView: "can_view",
    canEdit: "can_edit",
    canDelete: "can_delete",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceUploadRequestResponse$ {
  /** @deprecated use `GetWorkspaceUploadRequestResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceUploadRequestResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceUploadRequestResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetWorkspaceUploadRequestResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceUploadRequestResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceUploadRequestResponse$Outbound;
}

export function getWorkspaceUploadRequestResponseToJSON(
  getWorkspaceUploadRequestResponse: GetWorkspaceUploadRequestResponse,
): string {
  return JSON.stringify(
    GetWorkspaceUploadRequestResponse$outboundSchema.parse(
      getWorkspaceUploadRequestResponse,
    ),
  );
}

export function getWorkspaceUploadRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceUploadRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceUploadRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceUploadRequestResponse' from JSON`,
  );
}
