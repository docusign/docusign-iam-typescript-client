/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Indicates that a workflow has been successfully paused. New instances of this workflow will not be created.
 *
 * @remarks
 * Existing workflow instances will be unaffected.
 */
export type PauseNewWorkflowInstancesSuccess = {
  /**
   * Represents the new state of a workflow's mechanism to permit new workflow instances from being created.
   *
   * @remarks
   * Valid values include:
   *
   *   - active
   *   - paused
   */
  status?: string | undefined;
};

/** @internal */
export const PauseNewWorkflowInstancesSuccess$inboundSchema: z.ZodType<
  PauseNewWorkflowInstancesSuccess,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string().optional(),
});

/** @internal */
export type PauseNewWorkflowInstancesSuccess$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const PauseNewWorkflowInstancesSuccess$outboundSchema: z.ZodType<
  PauseNewWorkflowInstancesSuccess$Outbound,
  z.ZodTypeDef,
  PauseNewWorkflowInstancesSuccess
> = z.object({
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PauseNewWorkflowInstancesSuccess$ {
  /** @deprecated use `PauseNewWorkflowInstancesSuccess$inboundSchema` instead. */
  export const inboundSchema = PauseNewWorkflowInstancesSuccess$inboundSchema;
  /** @deprecated use `PauseNewWorkflowInstancesSuccess$outboundSchema` instead. */
  export const outboundSchema = PauseNewWorkflowInstancesSuccess$outboundSchema;
  /** @deprecated use `PauseNewWorkflowInstancesSuccess$Outbound` instead. */
  export type Outbound = PauseNewWorkflowInstancesSuccess$Outbound;
}

export function pauseNewWorkflowInstancesSuccessToJSON(
  pauseNewWorkflowInstancesSuccess: PauseNewWorkflowInstancesSuccess,
): string {
  return JSON.stringify(
    PauseNewWorkflowInstancesSuccess$outboundSchema.parse(
      pauseNewWorkflowInstancesSuccess,
    ),
  );
}

export function pauseNewWorkflowInstancesSuccessFromJSON(
  jsonString: string,
): SafeParseResult<PauseNewWorkflowInstancesSuccess, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PauseNewWorkflowInstancesSuccess$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PauseNewWorkflowInstancesSuccess' from JSON`,
  );
}
