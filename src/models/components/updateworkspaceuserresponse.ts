/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateWorkspaceUserResponse = {
  /**
   * The ID of the role assigned to the user
   */
  roleId?: string | undefined;
};

/** @internal */
export const UpdateWorkspaceUserResponse$inboundSchema: z.ZodType<
  UpdateWorkspaceUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "role_id": "roleId",
  });
});

/** @internal */
export type UpdateWorkspaceUserResponse$Outbound = {
  role_id?: string | undefined;
};

/** @internal */
export const UpdateWorkspaceUserResponse$outboundSchema: z.ZodType<
  UpdateWorkspaceUserResponse$Outbound,
  z.ZodTypeDef,
  UpdateWorkspaceUserResponse
> = z.object({
  roleId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    roleId: "role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWorkspaceUserResponse$ {
  /** @deprecated use `UpdateWorkspaceUserResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateWorkspaceUserResponse$inboundSchema;
  /** @deprecated use `UpdateWorkspaceUserResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateWorkspaceUserResponse$outboundSchema;
  /** @deprecated use `UpdateWorkspaceUserResponse$Outbound` instead. */
  export type Outbound = UpdateWorkspaceUserResponse$Outbound;
}

export function updateWorkspaceUserResponseToJSON(
  updateWorkspaceUserResponse: UpdateWorkspaceUserResponse,
): string {
  return JSON.stringify(
    UpdateWorkspaceUserResponse$outboundSchema.parse(
      updateWorkspaceUserResponse,
    ),
  );
}

export function updateWorkspaceUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWorkspaceUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWorkspaceUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWorkspaceUserResponse' from JSON`,
  );
}
