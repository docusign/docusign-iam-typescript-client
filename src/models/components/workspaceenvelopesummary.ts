/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The summary of the envelope in the workspace
 */
export type WorkspaceEnvelopeSummary = {
  /**
   * The ID of the envelope
   */
  envelopeId: string | null;
  /**
   * The status of the envelope in the workspace
   */
  status: string | null;
  /**
   * The envelope name
   */
  name?: string | null | undefined;
  /**
   * The envelope subject
   */
  subject?: string | null | undefined;
  /**
   * The date the envelope was created
   */
  createdDate?: Date | null | undefined;
  /**
   * The date the envelope was last updated
   */
  lastUpdatedDate?: Date | null | undefined;
};

/** @internal */
export const WorkspaceEnvelopeSummary$inboundSchema: z.ZodType<
  WorkspaceEnvelopeSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelope_id: z.nullable(z.string()),
  status: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
  created_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_updated_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "envelope_id": "envelopeId",
    "created_date": "createdDate",
    "last_updated_date": "lastUpdatedDate",
  });
});

/** @internal */
export type WorkspaceEnvelopeSummary$Outbound = {
  envelope_id: string | null;
  status: string | null;
  name?: string | null | undefined;
  subject?: string | null | undefined;
  created_date?: string | null | undefined;
  last_updated_date?: string | null | undefined;
};

/** @internal */
export const WorkspaceEnvelopeSummary$outboundSchema: z.ZodType<
  WorkspaceEnvelopeSummary$Outbound,
  z.ZodTypeDef,
  WorkspaceEnvelopeSummary
> = z.object({
  envelopeId: z.nullable(z.string()),
  status: z.nullable(z.string()),
  name: z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
  createdDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastUpdatedDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    envelopeId: "envelope_id",
    createdDate: "created_date",
    lastUpdatedDate: "last_updated_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceEnvelopeSummary$ {
  /** @deprecated use `WorkspaceEnvelopeSummary$inboundSchema` instead. */
  export const inboundSchema = WorkspaceEnvelopeSummary$inboundSchema;
  /** @deprecated use `WorkspaceEnvelopeSummary$outboundSchema` instead. */
  export const outboundSchema = WorkspaceEnvelopeSummary$outboundSchema;
  /** @deprecated use `WorkspaceEnvelopeSummary$Outbound` instead. */
  export type Outbound = WorkspaceEnvelopeSummary$Outbound;
}

export function workspaceEnvelopeSummaryToJSON(
  workspaceEnvelopeSummary: WorkspaceEnvelopeSummary,
): string {
  return JSON.stringify(
    WorkspaceEnvelopeSummary$outboundSchema.parse(workspaceEnvelopeSummary),
  );
}

export function workspaceEnvelopeSummaryFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceEnvelopeSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceEnvelopeSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceEnvelopeSummary' from JSON`,
  );
}
