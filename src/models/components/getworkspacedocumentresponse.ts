/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkspaceDocumentResponse = {
  /**
   * The ID of the workspace
   */
  workspaceId?: string | null | undefined;
  /**
   * The ID of the document
   */
  documentId: string;
  /**
   * The name of the document
   */
  name: string;
  /**
   * The ID of the owner of the document
   */
  ownerId?: string | null | undefined;
  /**
   * The size of the document in bytes
   */
  size?: number | null | undefined;
  /**
   * The date the document was created
   */
  createdDate?: Date | null | undefined;
  /**
   * The document content type
   */
  contentType?: string | null | undefined;
};

/** @internal */
export const GetWorkspaceDocumentResponse$inboundSchema: z.ZodType<
  GetWorkspaceDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.nullable(z.string()).optional(),
  document_id: z.string(),
  name: z.string(),
  owner_id: z.nullable(z.string()).optional(),
  size: z.nullable(z.number().int()).optional(),
  created_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  content_type: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "document_id": "documentId",
    "owner_id": "ownerId",
    "created_date": "createdDate",
    "content_type": "contentType",
  });
});

/** @internal */
export type GetWorkspaceDocumentResponse$Outbound = {
  workspace_id?: string | null | undefined;
  document_id: string;
  name: string;
  owner_id?: string | null | undefined;
  size?: number | null | undefined;
  created_date?: string | null | undefined;
  content_type?: string | null | undefined;
};

/** @internal */
export const GetWorkspaceDocumentResponse$outboundSchema: z.ZodType<
  GetWorkspaceDocumentResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceDocumentResponse
> = z.object({
  workspaceId: z.nullable(z.string()).optional(),
  documentId: z.string(),
  name: z.string(),
  ownerId: z.nullable(z.string()).optional(),
  size: z.nullable(z.number().int()).optional(),
  createdDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  contentType: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    documentId: "document_id",
    ownerId: "owner_id",
    createdDate: "created_date",
    contentType: "content_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceDocumentResponse$ {
  /** @deprecated use `GetWorkspaceDocumentResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceDocumentResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceDocumentResponse$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceDocumentResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceDocumentResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceDocumentResponse$Outbound;
}

export function getWorkspaceDocumentResponseToJSON(
  getWorkspaceDocumentResponse: GetWorkspaceDocumentResponse,
): string {
  return JSON.stringify(
    GetWorkspaceDocumentResponse$outboundSchema.parse(
      getWorkspaceDocumentResponse,
    ),
  );
}

export function getWorkspaceDocumentResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceDocumentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceDocumentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceDocumentResponse' from JSON`,
  );
}
