/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWorkspaceBody = {
  /**
   * The name of the workspace
   */
  name: string | null;
  /**
   * A GUID value that identifies a brand. For more information, see <a href="https://developers.docusign.com/docs/esign-rest-api/esign101/concepts/branding/">Branding</a>
   */
  brandId?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceBody$inboundSchema: z.ZodType<
  CreateWorkspaceBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  brand_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "brand_id": "brandId",
  });
});

/** @internal */
export type CreateWorkspaceBody$Outbound = {
  name: string | null;
  brand_id?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceBody$outboundSchema: z.ZodType<
  CreateWorkspaceBody$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceBody
> = z.object({
  name: z.nullable(z.string()),
  brandId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    brandId: "brand_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceBody$ {
  /** @deprecated use `CreateWorkspaceBody$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceBody$inboundSchema;
  /** @deprecated use `CreateWorkspaceBody$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceBody$outboundSchema;
  /** @deprecated use `CreateWorkspaceBody$Outbound` instead. */
  export type Outbound = CreateWorkspaceBody$Outbound;
}

export function createWorkspaceBodyToJSON(
  createWorkspaceBody: CreateWorkspaceBody,
): string {
  return JSON.stringify(
    CreateWorkspaceBody$outboundSchema.parse(createWorkspaceBody),
  );
}

export function createWorkspaceBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceBody' from JSON`,
  );
}
