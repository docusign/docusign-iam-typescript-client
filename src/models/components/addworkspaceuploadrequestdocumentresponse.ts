/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response for adding a document to an upload request
 */
export type AddWorkspaceUploadRequestDocumentResponse = {
  /**
   * The ID of the upload request
   */
  uploadRequestId: string;
  /**
   * The ID of the document that was added
   */
  documentId: string;
  /**
   * The name of the document
   */
  documentName: string | null;
};

/** @internal */
export const AddWorkspaceUploadRequestDocumentResponse$inboundSchema: z.ZodType<
  AddWorkspaceUploadRequestDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  upload_request_id: z.string(),
  document_id: z.string(),
  document_name: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "upload_request_id": "uploadRequestId",
    "document_id": "documentId",
    "document_name": "documentName",
  });
});

/** @internal */
export type AddWorkspaceUploadRequestDocumentResponse$Outbound = {
  upload_request_id: string;
  document_id: string;
  document_name: string | null;
};

/** @internal */
export const AddWorkspaceUploadRequestDocumentResponse$outboundSchema:
  z.ZodType<
    AddWorkspaceUploadRequestDocumentResponse$Outbound,
    z.ZodTypeDef,
    AddWorkspaceUploadRequestDocumentResponse
  > = z.object({
    uploadRequestId: z.string(),
    documentId: z.string(),
    documentName: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      uploadRequestId: "upload_request_id",
      documentId: "document_id",
      documentName: "document_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddWorkspaceUploadRequestDocumentResponse$ {
  /** @deprecated use `AddWorkspaceUploadRequestDocumentResponse$inboundSchema` instead. */
  export const inboundSchema =
    AddWorkspaceUploadRequestDocumentResponse$inboundSchema;
  /** @deprecated use `AddWorkspaceUploadRequestDocumentResponse$outboundSchema` instead. */
  export const outboundSchema =
    AddWorkspaceUploadRequestDocumentResponse$outboundSchema;
  /** @deprecated use `AddWorkspaceUploadRequestDocumentResponse$Outbound` instead. */
  export type Outbound = AddWorkspaceUploadRequestDocumentResponse$Outbound;
}

export function addWorkspaceUploadRequestDocumentResponseToJSON(
  addWorkspaceUploadRequestDocumentResponse:
    AddWorkspaceUploadRequestDocumentResponse,
): string {
  return JSON.stringify(
    AddWorkspaceUploadRequestDocumentResponse$outboundSchema.parse(
      addWorkspaceUploadRequestDocumentResponse,
    ),
  );
}

export function addWorkspaceUploadRequestDocumentResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  AddWorkspaceUploadRequestDocumentResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AddWorkspaceUploadRequestDocumentResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AddWorkspaceUploadRequestDocumentResponse' from JSON`,
  );
}
