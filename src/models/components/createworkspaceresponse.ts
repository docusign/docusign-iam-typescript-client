/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWorkspaceResponse = {
  /**
   * The ID of the workspace
   */
  workspaceId?: string | undefined;
  /**
   * The name of the workspace
   */
  name?: string | null | undefined;
  /**
   * The date the workspace was created
   */
  createdDate?: Date | null | undefined;
  /**
   * The ID of the user who created the workspace
   */
  createdByUserId?: string | null | undefined;
  /**
   * The list of user IDs of the workspace owners
   */
  workspaceOwnerIds?: Array<string> | null | undefined;
};

/** @internal */
export const CreateWorkspaceResponse$inboundSchema: z.ZodType<
  CreateWorkspaceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  created_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_by_user_id: z.nullable(z.string()).optional(),
  workspace_owner_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "created_date": "createdDate",
    "created_by_user_id": "createdByUserId",
    "workspace_owner_ids": "workspaceOwnerIds",
  });
});

/** @internal */
export type CreateWorkspaceResponse$Outbound = {
  workspace_id?: string | undefined;
  name?: string | null | undefined;
  created_date?: string | null | undefined;
  created_by_user_id?: string | null | undefined;
  workspace_owner_ids?: Array<string> | null | undefined;
};

/** @internal */
export const CreateWorkspaceResponse$outboundSchema: z.ZodType<
  CreateWorkspaceResponse$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceResponse
> = z.object({
  workspaceId: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  createdDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdByUserId: z.nullable(z.string()).optional(),
  workspaceOwnerIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    createdDate: "created_date",
    createdByUserId: "created_by_user_id",
    workspaceOwnerIds: "workspace_owner_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceResponse$ {
  /** @deprecated use `CreateWorkspaceResponse$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceResponse$inboundSchema;
  /** @deprecated use `CreateWorkspaceResponse$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceResponse$outboundSchema;
  /** @deprecated use `CreateWorkspaceResponse$Outbound` instead. */
  export type Outbound = CreateWorkspaceResponse$Outbound;
}

export function createWorkspaceResponseToJSON(
  createWorkspaceResponse: CreateWorkspaceResponse,
): string {
  return JSON.stringify(
    CreateWorkspaceResponse$outboundSchema.parse(createWorkspaceResponse),
  );
}

export function createWorkspaceResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceResponse' from JSON`,
  );
}
