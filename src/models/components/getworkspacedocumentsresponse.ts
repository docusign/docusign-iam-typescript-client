/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkspaceDocument,
  WorkspaceDocument$inboundSchema,
  WorkspaceDocument$Outbound,
  WorkspaceDocument$outboundSchema,
} from "./workspacedocument.js";

export type GetWorkspaceDocumentsResponse = {
  /**
   * The document summary list. Includes the ID, name, and metadata
   */
  documents?: Array<WorkspaceDocument> | null | undefined;
  /**
   * The number of documents returned in the response. Always equal or less than the `count` of the request
   */
  resultSetSize?: number | null | undefined;
  /**
   * Position of the first item in the total results
   */
  startPosition?: number | null | undefined;
  /**
   * Position of the last item in the total results
   */
  endPosition?: number | null | undefined;
  /**
   * The total number of documents in the workspace applicable to the request regardless of pagination. It may not always be computed
   */
  totalRowCount?: number | null | undefined;
};

/** @internal */
export const GetWorkspaceDocumentsResponse$inboundSchema: z.ZodType<
  GetWorkspaceDocumentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  documents: z.nullable(z.array(WorkspaceDocument$inboundSchema)).optional(),
  result_set_size: z.nullable(z.number().int()).optional(),
  start_position: z.nullable(z.number().int()).optional(),
  end_position: z.nullable(z.number().int()).optional(),
  total_row_count: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "result_set_size": "resultSetSize",
    "start_position": "startPosition",
    "end_position": "endPosition",
    "total_row_count": "totalRowCount",
  });
});

/** @internal */
export type GetWorkspaceDocumentsResponse$Outbound = {
  documents?: Array<WorkspaceDocument$Outbound> | null | undefined;
  result_set_size?: number | null | undefined;
  start_position?: number | null | undefined;
  end_position?: number | null | undefined;
  total_row_count?: number | null | undefined;
};

/** @internal */
export const GetWorkspaceDocumentsResponse$outboundSchema: z.ZodType<
  GetWorkspaceDocumentsResponse$Outbound,
  z.ZodTypeDef,
  GetWorkspaceDocumentsResponse
> = z.object({
  documents: z.nullable(z.array(WorkspaceDocument$outboundSchema)).optional(),
  resultSetSize: z.nullable(z.number().int()).optional(),
  startPosition: z.nullable(z.number().int()).optional(),
  endPosition: z.nullable(z.number().int()).optional(),
  totalRowCount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    resultSetSize: "result_set_size",
    startPosition: "start_position",
    endPosition: "end_position",
    totalRowCount: "total_row_count",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceDocumentsResponse$ {
  /** @deprecated use `GetWorkspaceDocumentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceDocumentsResponse$inboundSchema;
  /** @deprecated use `GetWorkspaceDocumentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceDocumentsResponse$outboundSchema;
  /** @deprecated use `GetWorkspaceDocumentsResponse$Outbound` instead. */
  export type Outbound = GetWorkspaceDocumentsResponse$Outbound;
}

export function getWorkspaceDocumentsResponseToJSON(
  getWorkspaceDocumentsResponse: GetWorkspaceDocumentsResponse,
): string {
  return JSON.stringify(
    GetWorkspaceDocumentsResponse$outboundSchema.parse(
      getWorkspaceDocumentsResponse,
    ),
  );
}

export function getWorkspaceDocumentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceDocumentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceDocumentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceDocumentsResponse' from JSON`,
  );
}
