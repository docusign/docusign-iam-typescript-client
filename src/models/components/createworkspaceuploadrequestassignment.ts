/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkspaceUploadRequestResponsibilityType,
  WorkspaceUploadRequestResponsibilityType$inboundSchema,
  WorkspaceUploadRequestResponsibilityType$outboundSchema,
} from "./workspaceuploadrequestresponsibilitytype.js";

export type CreateWorkspaceUploadRequestAssignment = {
  /**
   * The ID of the assigned user
   */
  assigneeUserId?: string | null | undefined;
  /**
   * Enum representing the responsibility type for a workspace upload request assignment
   */
  uploadRequestResponsibilityTypeId: WorkspaceUploadRequestResponsibilityType;
  /**
   * The first name of the assignee
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the assignee
   */
  lastName?: string | null | undefined;
  /**
   * The email of the assignee
   */
  email?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceUploadRequestAssignment$inboundSchema: z.ZodType<
  CreateWorkspaceUploadRequestAssignment,
  z.ZodTypeDef,
  unknown
> = z.object({
  assignee_user_id: z.nullable(z.string()).optional(),
  upload_request_responsibility_type_id:
    WorkspaceUploadRequestResponsibilityType$inboundSchema,
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "assignee_user_id": "assigneeUserId",
    "upload_request_responsibility_type_id":
      "uploadRequestResponsibilityTypeId",
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type CreateWorkspaceUploadRequestAssignment$Outbound = {
  assignee_user_id?: string | null | undefined;
  upload_request_responsibility_type_id: string;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  email?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceUploadRequestAssignment$outboundSchema: z.ZodType<
  CreateWorkspaceUploadRequestAssignment$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceUploadRequestAssignment
> = z.object({
  assigneeUserId: z.nullable(z.string()).optional(),
  uploadRequestResponsibilityTypeId:
    WorkspaceUploadRequestResponsibilityType$outboundSchema,
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  email: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    assigneeUserId: "assignee_user_id",
    uploadRequestResponsibilityTypeId: "upload_request_responsibility_type_id",
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceUploadRequestAssignment$ {
  /** @deprecated use `CreateWorkspaceUploadRequestAssignment$inboundSchema` instead. */
  export const inboundSchema =
    CreateWorkspaceUploadRequestAssignment$inboundSchema;
  /** @deprecated use `CreateWorkspaceUploadRequestAssignment$outboundSchema` instead. */
  export const outboundSchema =
    CreateWorkspaceUploadRequestAssignment$outboundSchema;
  /** @deprecated use `CreateWorkspaceUploadRequestAssignment$Outbound` instead. */
  export type Outbound = CreateWorkspaceUploadRequestAssignment$Outbound;
}

export function createWorkspaceUploadRequestAssignmentToJSON(
  createWorkspaceUploadRequestAssignment:
    CreateWorkspaceUploadRequestAssignment,
): string {
  return JSON.stringify(
    CreateWorkspaceUploadRequestAssignment$outboundSchema.parse(
      createWorkspaceUploadRequestAssignment,
    ),
  );
}

export function createWorkspaceUploadRequestAssignmentFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceUploadRequestAssignment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateWorkspaceUploadRequestAssignment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceUploadRequestAssignment' from JSON`,
  );
}
