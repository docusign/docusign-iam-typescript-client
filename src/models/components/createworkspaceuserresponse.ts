/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWorkspaceUserResponse = {
  /**
   * The ID of the workspace
   */
  workspaceId?: string | undefined;
  /**
   * The ID of the user
   */
  userId?: string | undefined;
  /**
   * The ID of the role assigned to the user
   */
  roleId?: string | undefined;
  /**
   * The email of the user
   */
  email?: string | null | undefined;
  /**
   * The first name of the user
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the user
   */
  lastName?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceUserResponse$inboundSchema: z.ZodType<
  CreateWorkspaceUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  workspace_id: z.string().optional(),
  user_id: z.string().optional(),
  role_id: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "workspace_id": "workspaceId",
    "user_id": "userId",
    "role_id": "roleId",
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type CreateWorkspaceUserResponse$Outbound = {
  workspace_id?: string | undefined;
  user_id?: string | undefined;
  role_id?: string | undefined;
  email?: string | null | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceUserResponse$outboundSchema: z.ZodType<
  CreateWorkspaceUserResponse$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceUserResponse
> = z.object({
  workspaceId: z.string().optional(),
  userId: z.string().optional(),
  roleId: z.string().optional(),
  email: z.nullable(z.string()).optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceId: "workspace_id",
    userId: "user_id",
    roleId: "role_id",
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceUserResponse$ {
  /** @deprecated use `CreateWorkspaceUserResponse$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceUserResponse$inboundSchema;
  /** @deprecated use `CreateWorkspaceUserResponse$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceUserResponse$outboundSchema;
  /** @deprecated use `CreateWorkspaceUserResponse$Outbound` instead. */
  export type Outbound = CreateWorkspaceUserResponse$Outbound;
}

export function createWorkspaceUserResponseToJSON(
  createWorkspaceUserResponse: CreateWorkspaceUserResponse,
): string {
  return JSON.stringify(
    CreateWorkspaceUserResponse$outboundSchema.parse(
      createWorkspaceUserResponse,
    ),
  );
}

export function createWorkspaceUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceUserResponse' from JSON`,
  );
}
