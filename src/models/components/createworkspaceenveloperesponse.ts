/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWorkspaceEnvelopeResponse = {
  envelopeId?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceEnvelopeResponse$inboundSchema: z.ZodType<
  CreateWorkspaceEnvelopeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  envelope_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "envelope_id": "envelopeId",
  });
});

/** @internal */
export type CreateWorkspaceEnvelopeResponse$Outbound = {
  envelope_id?: string | null | undefined;
};

/** @internal */
export const CreateWorkspaceEnvelopeResponse$outboundSchema: z.ZodType<
  CreateWorkspaceEnvelopeResponse$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceEnvelopeResponse
> = z.object({
  envelopeId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    envelopeId: "envelope_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceEnvelopeResponse$ {
  /** @deprecated use `CreateWorkspaceEnvelopeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceEnvelopeResponse$inboundSchema;
  /** @deprecated use `CreateWorkspaceEnvelopeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceEnvelopeResponse$outboundSchema;
  /** @deprecated use `CreateWorkspaceEnvelopeResponse$Outbound` instead. */
  export type Outbound = CreateWorkspaceEnvelopeResponse$Outbound;
}

export function createWorkspaceEnvelopeResponseToJSON(
  createWorkspaceEnvelopeResponse: CreateWorkspaceEnvelopeResponse,
): string {
  return JSON.stringify(
    CreateWorkspaceEnvelopeResponse$outboundSchema.parse(
      createWorkspaceEnvelopeResponse,
    ),
  );
}

export function createWorkspaceEnvelopeResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceEnvelopeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceEnvelopeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceEnvelopeResponse' from JSON`,
  );
}
