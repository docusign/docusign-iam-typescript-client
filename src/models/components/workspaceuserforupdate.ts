/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkspaceUserForUpdate = {
  /**
   * The ID of the role to update to
   */
  roleId?: string | undefined;
};

/** @internal */
export const WorkspaceUserForUpdate$inboundSchema: z.ZodType<
  WorkspaceUserForUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "role_id": "roleId",
  });
});

/** @internal */
export type WorkspaceUserForUpdate$Outbound = {
  role_id?: string | undefined;
};

/** @internal */
export const WorkspaceUserForUpdate$outboundSchema: z.ZodType<
  WorkspaceUserForUpdate$Outbound,
  z.ZodTypeDef,
  WorkspaceUserForUpdate
> = z.object({
  roleId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    roleId: "role_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceUserForUpdate$ {
  /** @deprecated use `WorkspaceUserForUpdate$inboundSchema` instead. */
  export const inboundSchema = WorkspaceUserForUpdate$inboundSchema;
  /** @deprecated use `WorkspaceUserForUpdate$outboundSchema` instead. */
  export const outboundSchema = WorkspaceUserForUpdate$outboundSchema;
  /** @deprecated use `WorkspaceUserForUpdate$Outbound` instead. */
  export type Outbound = WorkspaceUserForUpdate$Outbound;
}

export function workspaceUserForUpdateToJSON(
  workspaceUserForUpdate: WorkspaceUserForUpdate,
): string {
  return JSON.stringify(
    WorkspaceUserForUpdate$outboundSchema.parse(workspaceUserForUpdate),
  );
}

export function workspaceUserForUpdateFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceUserForUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceUserForUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceUserForUpdate' from JSON`,
  );
}
