/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateWorkspaceUploadRequestAssignment,
  CreateWorkspaceUploadRequestAssignment$inboundSchema,
  CreateWorkspaceUploadRequestAssignment$Outbound,
  CreateWorkspaceUploadRequestAssignment$outboundSchema,
} from "./createworkspaceuploadrequestassignment.js";
import {
  WorkspaceUploadRequestStatus,
  WorkspaceUploadRequestStatus$inboundSchema,
  WorkspaceUploadRequestStatus$outboundSchema,
} from "./workspaceuploadrequeststatus.js";

export type CreateWorkspaceUploadRequestBody = {
  /**
   * The name of the upload request
   */
  name: string | null;
  /**
   * The description of the upload request
   */
  description: string | null;
  /**
   * The due date for the upload request
   */
  dueDate: Date;
  /**
   * List of user assignments for the upload request
   */
  assignments: Array<CreateWorkspaceUploadRequestAssignment> | null;
  /**
   * Enum representing the status of a workspace upload request
   */
  status: WorkspaceUploadRequestStatus;
};

/** @internal */
export const CreateWorkspaceUploadRequestBody$inboundSchema: z.ZodType<
  CreateWorkspaceUploadRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  due_date: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  assignments: z.nullable(
    z.array(CreateWorkspaceUploadRequestAssignment$inboundSchema),
  ),
  status: WorkspaceUploadRequestStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "due_date": "dueDate",
  });
});

/** @internal */
export type CreateWorkspaceUploadRequestBody$Outbound = {
  name: string | null;
  description: string | null;
  due_date: string;
  assignments: Array<CreateWorkspaceUploadRequestAssignment$Outbound> | null;
  status: string;
};

/** @internal */
export const CreateWorkspaceUploadRequestBody$outboundSchema: z.ZodType<
  CreateWorkspaceUploadRequestBody$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceUploadRequestBody
> = z.object({
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  dueDate: z.date().transform(v => v.toISOString()),
  assignments: z.nullable(
    z.array(CreateWorkspaceUploadRequestAssignment$outboundSchema),
  ),
  status: WorkspaceUploadRequestStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    dueDate: "due_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceUploadRequestBody$ {
  /** @deprecated use `CreateWorkspaceUploadRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceUploadRequestBody$inboundSchema;
  /** @deprecated use `CreateWorkspaceUploadRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceUploadRequestBody$outboundSchema;
  /** @deprecated use `CreateWorkspaceUploadRequestBody$Outbound` instead. */
  export type Outbound = CreateWorkspaceUploadRequestBody$Outbound;
}

export function createWorkspaceUploadRequestBodyToJSON(
  createWorkspaceUploadRequestBody: CreateWorkspaceUploadRequestBody,
): string {
  return JSON.stringify(
    CreateWorkspaceUploadRequestBody$outboundSchema.parse(
      createWorkspaceUploadRequestBody,
    ),
  );
}

export function createWorkspaceUploadRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceUploadRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceUploadRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceUploadRequestBody' from JSON`,
  );
}
