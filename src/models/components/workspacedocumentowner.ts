/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkspaceDocumentOwner = {
  /**
   * The first name of the document owner
   */
  firstName?: string | null | undefined;
  /**
   * The last name of the document owner
   */
  lastName?: string | null | undefined;
};

/** @internal */
export const WorkspaceDocumentOwner$inboundSchema: z.ZodType<
  WorkspaceDocumentOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
  });
});

/** @internal */
export type WorkspaceDocumentOwner$Outbound = {
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
};

/** @internal */
export const WorkspaceDocumentOwner$outboundSchema: z.ZodType<
  WorkspaceDocumentOwner$Outbound,
  z.ZodTypeDef,
  WorkspaceDocumentOwner
> = z.object({
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceDocumentOwner$ {
  /** @deprecated use `WorkspaceDocumentOwner$inboundSchema` instead. */
  export const inboundSchema = WorkspaceDocumentOwner$inboundSchema;
  /** @deprecated use `WorkspaceDocumentOwner$outboundSchema` instead. */
  export const outboundSchema = WorkspaceDocumentOwner$outboundSchema;
  /** @deprecated use `WorkspaceDocumentOwner$Outbound` instead. */
  export type Outbound = WorkspaceDocumentOwner$Outbound;
}

export function workspaceDocumentOwnerToJSON(
  workspaceDocumentOwner: WorkspaceDocumentOwner,
): string {
  return JSON.stringify(
    WorkspaceDocumentOwner$outboundSchema.parse(workspaceDocumentOwner),
  );
}

export function workspaceDocumentOwnerFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceDocumentOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceDocumentOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceDocumentOwner' from JSON`,
  );
}
