/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddWorkspaceDocumentRequestFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type AddWorkspaceDocumentRequest = {
  /**
   * The file within the multipart/form-data
   */
  file?: AddWorkspaceDocumentRequestFile | Blob | undefined;
};

/** @internal */
export const AddWorkspaceDocumentRequestFile$inboundSchema: z.ZodType<
  AddWorkspaceDocumentRequestFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type AddWorkspaceDocumentRequestFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const AddWorkspaceDocumentRequestFile$outboundSchema: z.ZodType<
  AddWorkspaceDocumentRequestFile$Outbound,
  z.ZodTypeDef,
  AddWorkspaceDocumentRequestFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddWorkspaceDocumentRequestFile$ {
  /** @deprecated use `AddWorkspaceDocumentRequestFile$inboundSchema` instead. */
  export const inboundSchema = AddWorkspaceDocumentRequestFile$inboundSchema;
  /** @deprecated use `AddWorkspaceDocumentRequestFile$outboundSchema` instead. */
  export const outboundSchema = AddWorkspaceDocumentRequestFile$outboundSchema;
  /** @deprecated use `AddWorkspaceDocumentRequestFile$Outbound` instead. */
  export type Outbound = AddWorkspaceDocumentRequestFile$Outbound;
}

export function addWorkspaceDocumentRequestFileToJSON(
  addWorkspaceDocumentRequestFile: AddWorkspaceDocumentRequestFile,
): string {
  return JSON.stringify(
    AddWorkspaceDocumentRequestFile$outboundSchema.parse(
      addWorkspaceDocumentRequestFile,
    ),
  );
}

export function addWorkspaceDocumentRequestFileFromJSON(
  jsonString: string,
): SafeParseResult<AddWorkspaceDocumentRequestFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddWorkspaceDocumentRequestFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddWorkspaceDocumentRequestFile' from JSON`,
  );
}

/** @internal */
export const AddWorkspaceDocumentRequest$inboundSchema: z.ZodType<
  AddWorkspaceDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => AddWorkspaceDocumentRequestFile$inboundSchema).optional(),
});

/** @internal */
export type AddWorkspaceDocumentRequest$Outbound = {
  file?: AddWorkspaceDocumentRequestFile$Outbound | Blob | undefined;
};

/** @internal */
export const AddWorkspaceDocumentRequest$outboundSchema: z.ZodType<
  AddWorkspaceDocumentRequest$Outbound,
  z.ZodTypeDef,
  AddWorkspaceDocumentRequest
> = z.object({
  file: z.lazy(() => AddWorkspaceDocumentRequestFile$outboundSchema).or(
    blobLikeSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddWorkspaceDocumentRequest$ {
  /** @deprecated use `AddWorkspaceDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = AddWorkspaceDocumentRequest$inboundSchema;
  /** @deprecated use `AddWorkspaceDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = AddWorkspaceDocumentRequest$outboundSchema;
  /** @deprecated use `AddWorkspaceDocumentRequest$Outbound` instead. */
  export type Outbound = AddWorkspaceDocumentRequest$Outbound;
}

export function addWorkspaceDocumentRequestToJSON(
  addWorkspaceDocumentRequest: AddWorkspaceDocumentRequest,
): string {
  return JSON.stringify(
    AddWorkspaceDocumentRequest$outboundSchema.parse(
      addWorkspaceDocumentRequest,
    ),
  );
}

export function addWorkspaceDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddWorkspaceDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddWorkspaceDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddWorkspaceDocumentRequest' from JSON`,
  );
}
