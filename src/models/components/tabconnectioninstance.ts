/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TabConnectionInstance = {
  /**
   * Identifies an extension app's unique connection key.
   */
  connectionKey: string;
  /**
   * Identifies an extension app's connection instance.
   */
  connectionValue: string;
};

/** @internal */
export const TabConnectionInstance$inboundSchema: z.ZodType<
  TabConnectionInstance,
  z.ZodTypeDef,
  unknown
> = z.object({
  connectionKey: z.string(),
  connectionValue: z.string(),
});

/** @internal */
export type TabConnectionInstance$Outbound = {
  connectionKey: string;
  connectionValue: string;
};

/** @internal */
export const TabConnectionInstance$outboundSchema: z.ZodType<
  TabConnectionInstance$Outbound,
  z.ZodTypeDef,
  TabConnectionInstance
> = z.object({
  connectionKey: z.string(),
  connectionValue: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TabConnectionInstance$ {
  /** @deprecated use `TabConnectionInstance$inboundSchema` instead. */
  export const inboundSchema = TabConnectionInstance$inboundSchema;
  /** @deprecated use `TabConnectionInstance$outboundSchema` instead. */
  export const outboundSchema = TabConnectionInstance$outboundSchema;
  /** @deprecated use `TabConnectionInstance$Outbound` instead. */
  export type Outbound = TabConnectionInstance$Outbound;
}

export function tabConnectionInstanceToJSON(
  tabConnectionInstance: TabConnectionInstance,
): string {
  return JSON.stringify(
    TabConnectionInstance$outboundSchema.parse(tabConnectionInstance),
  );
}

export function tabConnectionInstanceFromJSON(
  jsonString: string,
): SafeParseResult<TabConnectionInstance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TabConnectionInstance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TabConnectionInstance' from JSON`,
  );
}
