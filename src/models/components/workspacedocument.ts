/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WorkspaceDocumentOwner,
  WorkspaceDocumentOwner$inboundSchema,
  WorkspaceDocumentOwner$Outbound,
  WorkspaceDocumentOwner$outboundSchema,
} from "./workspacedocumentowner.js";

export type WorkspaceDocument = {
  /**
   * The ID of the document
   */
  documentId: string;
  /**
   * The name of the document
   */
  name?: string | null | undefined;
  /**
   * The ID of the user who owns the document
   */
  ownerId?: string | null | undefined;
  /**
   * The size of the document in bytes
   */
  size?: number | null | undefined;
  /**
   * The date the document was created
   */
  createdDate?: Date | null | undefined;
  /**
   * The date the document was last updated
   */
  lastUpdatedDate?: Date | null | undefined;
  owner?: WorkspaceDocumentOwner | undefined;
};

/** @internal */
export const WorkspaceDocument$inboundSchema: z.ZodType<
  WorkspaceDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  document_id: z.string(),
  name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  size: z.nullable(z.number().int()).optional(),
  created_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_updated_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  owner: WorkspaceDocumentOwner$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "document_id": "documentId",
    "owner_id": "ownerId",
    "created_date": "createdDate",
    "last_updated_date": "lastUpdatedDate",
  });
});

/** @internal */
export type WorkspaceDocument$Outbound = {
  document_id: string;
  name?: string | null | undefined;
  owner_id?: string | null | undefined;
  size?: number | null | undefined;
  created_date?: string | null | undefined;
  last_updated_date?: string | null | undefined;
  owner?: WorkspaceDocumentOwner$Outbound | undefined;
};

/** @internal */
export const WorkspaceDocument$outboundSchema: z.ZodType<
  WorkspaceDocument$Outbound,
  z.ZodTypeDef,
  WorkspaceDocument
> = z.object({
  documentId: z.string(),
  name: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  size: z.nullable(z.number().int()).optional(),
  createdDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastUpdatedDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  owner: WorkspaceDocumentOwner$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    documentId: "document_id",
    ownerId: "owner_id",
    createdDate: "created_date",
    lastUpdatedDate: "last_updated_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceDocument$ {
  /** @deprecated use `WorkspaceDocument$inboundSchema` instead. */
  export const inboundSchema = WorkspaceDocument$inboundSchema;
  /** @deprecated use `WorkspaceDocument$outboundSchema` instead. */
  export const outboundSchema = WorkspaceDocument$outboundSchema;
  /** @deprecated use `WorkspaceDocument$Outbound` instead. */
  export type Outbound = WorkspaceDocument$Outbound;
}

export function workspaceDocumentToJSON(
  workspaceDocument: WorkspaceDocument,
): string {
  return JSON.stringify(
    WorkspaceDocument$outboundSchema.parse(workspaceDocument),
  );
}

export function workspaceDocumentFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceDocument, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceDocument$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceDocument' from JSON`,
  );
}
