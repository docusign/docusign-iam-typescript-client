/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkspaceRoleSummary = {
  /**
   * The ID of the role
   */
  roleId?: string | undefined;
  /**
   * The name of the role
   */
  name?: string | null | undefined;
  /**
   * If this role is applicable to any participant of a workspace including those outside the account. If false, this role may only be assigned to internal users of the same account
   */
  isExternal?: boolean | null | undefined;
  /**
   * The date the role was created
   */
  createdDate?: Date | null | undefined;
};

/** @internal */
export const WorkspaceRoleSummary$inboundSchema: z.ZodType<
  WorkspaceRoleSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  role_id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  is_external: z.nullable(z.boolean()).optional(),
  created_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "role_id": "roleId",
    "is_external": "isExternal",
    "created_date": "createdDate",
  });
});

/** @internal */
export type WorkspaceRoleSummary$Outbound = {
  role_id?: string | undefined;
  name?: string | null | undefined;
  is_external?: boolean | null | undefined;
  created_date?: string | null | undefined;
};

/** @internal */
export const WorkspaceRoleSummary$outboundSchema: z.ZodType<
  WorkspaceRoleSummary$Outbound,
  z.ZodTypeDef,
  WorkspaceRoleSummary
> = z.object({
  roleId: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  isExternal: z.nullable(z.boolean()).optional(),
  createdDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    roleId: "role_id",
    isExternal: "is_external",
    createdDate: "created_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceRoleSummary$ {
  /** @deprecated use `WorkspaceRoleSummary$inboundSchema` instead. */
  export const inboundSchema = WorkspaceRoleSummary$inboundSchema;
  /** @deprecated use `WorkspaceRoleSummary$outboundSchema` instead. */
  export const outboundSchema = WorkspaceRoleSummary$outboundSchema;
  /** @deprecated use `WorkspaceRoleSummary$Outbound` instead. */
  export type Outbound = WorkspaceRoleSummary$Outbound;
}

export function workspaceRoleSummaryToJSON(
  workspaceRoleSummary: WorkspaceRoleSummary,
): string {
  return JSON.stringify(
    WorkspaceRoleSummary$outboundSchema.parse(workspaceRoleSummary),
  );
}

export function workspaceRoleSummaryFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceRoleSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceRoleSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceRoleSummary' from JSON`,
  );
}
