/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddWorkspaceUploadRequestDocumentRequestFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type AddWorkspaceUploadRequestDocumentRequest = {
  /**
   * The file within the multipart/form-data
   */
  file?: AddWorkspaceUploadRequestDocumentRequestFile | Blob | undefined;
};

/** @internal */
export const AddWorkspaceUploadRequestDocumentRequestFile$inboundSchema:
  z.ZodType<
    AddWorkspaceUploadRequestDocumentRequestFile,
    z.ZodTypeDef,
    unknown
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type AddWorkspaceUploadRequestDocumentRequestFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const AddWorkspaceUploadRequestDocumentRequestFile$outboundSchema:
  z.ZodType<
    AddWorkspaceUploadRequestDocumentRequestFile$Outbound,
    z.ZodTypeDef,
    AddWorkspaceUploadRequestDocumentRequestFile
  > = z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddWorkspaceUploadRequestDocumentRequestFile$ {
  /** @deprecated use `AddWorkspaceUploadRequestDocumentRequestFile$inboundSchema` instead. */
  export const inboundSchema =
    AddWorkspaceUploadRequestDocumentRequestFile$inboundSchema;
  /** @deprecated use `AddWorkspaceUploadRequestDocumentRequestFile$outboundSchema` instead. */
  export const outboundSchema =
    AddWorkspaceUploadRequestDocumentRequestFile$outboundSchema;
  /** @deprecated use `AddWorkspaceUploadRequestDocumentRequestFile$Outbound` instead. */
  export type Outbound = AddWorkspaceUploadRequestDocumentRequestFile$Outbound;
}

export function addWorkspaceUploadRequestDocumentRequestFileToJSON(
  addWorkspaceUploadRequestDocumentRequestFile:
    AddWorkspaceUploadRequestDocumentRequestFile,
): string {
  return JSON.stringify(
    AddWorkspaceUploadRequestDocumentRequestFile$outboundSchema.parse(
      addWorkspaceUploadRequestDocumentRequestFile,
    ),
  );
}

export function addWorkspaceUploadRequestDocumentRequestFileFromJSON(
  jsonString: string,
): SafeParseResult<
  AddWorkspaceUploadRequestDocumentRequestFile,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AddWorkspaceUploadRequestDocumentRequestFile$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AddWorkspaceUploadRequestDocumentRequestFile' from JSON`,
  );
}

/** @internal */
export const AddWorkspaceUploadRequestDocumentRequest$inboundSchema: z.ZodType<
  AddWorkspaceUploadRequestDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  file: z.lazy(() => AddWorkspaceUploadRequestDocumentRequestFile$inboundSchema)
    .optional(),
});

/** @internal */
export type AddWorkspaceUploadRequestDocumentRequest$Outbound = {
  file?:
    | AddWorkspaceUploadRequestDocumentRequestFile$Outbound
    | Blob
    | undefined;
};

/** @internal */
export const AddWorkspaceUploadRequestDocumentRequest$outboundSchema: z.ZodType<
  AddWorkspaceUploadRequestDocumentRequest$Outbound,
  z.ZodTypeDef,
  AddWorkspaceUploadRequestDocumentRequest
> = z.object({
  file: z.lazy(() =>
    AddWorkspaceUploadRequestDocumentRequestFile$outboundSchema
  ).or(blobLikeSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddWorkspaceUploadRequestDocumentRequest$ {
  /** @deprecated use `AddWorkspaceUploadRequestDocumentRequest$inboundSchema` instead. */
  export const inboundSchema =
    AddWorkspaceUploadRequestDocumentRequest$inboundSchema;
  /** @deprecated use `AddWorkspaceUploadRequestDocumentRequest$outboundSchema` instead. */
  export const outboundSchema =
    AddWorkspaceUploadRequestDocumentRequest$outboundSchema;
  /** @deprecated use `AddWorkspaceUploadRequestDocumentRequest$Outbound` instead. */
  export type Outbound = AddWorkspaceUploadRequestDocumentRequest$Outbound;
}

export function addWorkspaceUploadRequestDocumentRequestToJSON(
  addWorkspaceUploadRequestDocumentRequest:
    AddWorkspaceUploadRequestDocumentRequest,
): string {
  return JSON.stringify(
    AddWorkspaceUploadRequestDocumentRequest$outboundSchema.parse(
      addWorkspaceUploadRequestDocumentRequest,
    ),
  );
}

export function addWorkspaceUploadRequestDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AddWorkspaceUploadRequestDocumentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AddWorkspaceUploadRequestDocumentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AddWorkspaceUploadRequestDocumentRequest' from JSON`,
  );
}
