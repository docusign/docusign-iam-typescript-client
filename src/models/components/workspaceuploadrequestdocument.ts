/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkspaceUploadRequestDocument = {
  /**
   * The document name
   */
  documentName?: string | null | undefined;
  /**
   * The document ID
   */
  documentId?: string | null | undefined;
};

/** @internal */
export const WorkspaceUploadRequestDocument$inboundSchema: z.ZodType<
  WorkspaceUploadRequestDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  document_name: z.nullable(z.string()).optional(),
  document_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "document_name": "documentName",
    "document_id": "documentId",
  });
});

/** @internal */
export type WorkspaceUploadRequestDocument$Outbound = {
  document_name?: string | null | undefined;
  document_id?: string | null | undefined;
};

/** @internal */
export const WorkspaceUploadRequestDocument$outboundSchema: z.ZodType<
  WorkspaceUploadRequestDocument$Outbound,
  z.ZodTypeDef,
  WorkspaceUploadRequestDocument
> = z.object({
  documentName: z.nullable(z.string()).optional(),
  documentId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    documentName: "document_name",
    documentId: "document_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkspaceUploadRequestDocument$ {
  /** @deprecated use `WorkspaceUploadRequestDocument$inboundSchema` instead. */
  export const inboundSchema = WorkspaceUploadRequestDocument$inboundSchema;
  /** @deprecated use `WorkspaceUploadRequestDocument$outboundSchema` instead. */
  export const outboundSchema = WorkspaceUploadRequestDocument$outboundSchema;
  /** @deprecated use `WorkspaceUploadRequestDocument$Outbound` instead. */
  export type Outbound = WorkspaceUploadRequestDocument$Outbound;
}

export function workspaceUploadRequestDocumentToJSON(
  workspaceUploadRequestDocument: WorkspaceUploadRequestDocument,
): string {
  return JSON.stringify(
    WorkspaceUploadRequestDocument$outboundSchema.parse(
      workspaceUploadRequestDocument,
    ),
  );
}

export function workspaceUploadRequestDocumentFromJSON(
  jsonString: string,
): SafeParseResult<WorkspaceUploadRequestDocument, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkspaceUploadRequestDocument$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkspaceUploadRequestDocument' from JSON`,
  );
}
