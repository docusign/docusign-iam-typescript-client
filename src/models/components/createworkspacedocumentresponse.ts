/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateWorkspaceDocumentOwner,
  CreateWorkspaceDocumentOwner$inboundSchema,
  CreateWorkspaceDocumentOwner$Outbound,
  CreateWorkspaceDocumentOwner$outboundSchema,
} from "./createworkspacedocumentowner.js";

export type CreateWorkspaceDocumentResponse = {
  documentId?: string | undefined;
  name?: string | null | undefined;
  ownerId?: string | null | undefined;
  size?: number | null | undefined;
  createdDate?: Date | null | undefined;
  lastUpdatedDate?: Date | null | undefined;
  owner?: CreateWorkspaceDocumentOwner | undefined;
};

/** @internal */
export const CreateWorkspaceDocumentResponse$inboundSchema: z.ZodType<
  CreateWorkspaceDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  document_id: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  owner_id: z.nullable(z.string()).optional(),
  size: z.nullable(z.number().int()).optional(),
  created_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  last_updated_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  owner: CreateWorkspaceDocumentOwner$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "document_id": "documentId",
    "owner_id": "ownerId",
    "created_date": "createdDate",
    "last_updated_date": "lastUpdatedDate",
  });
});

/** @internal */
export type CreateWorkspaceDocumentResponse$Outbound = {
  document_id?: string | undefined;
  name?: string | null | undefined;
  owner_id?: string | null | undefined;
  size?: number | null | undefined;
  created_date?: string | null | undefined;
  last_updated_date?: string | null | undefined;
  owner?: CreateWorkspaceDocumentOwner$Outbound | undefined;
};

/** @internal */
export const CreateWorkspaceDocumentResponse$outboundSchema: z.ZodType<
  CreateWorkspaceDocumentResponse$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceDocumentResponse
> = z.object({
  documentId: z.string().optional(),
  name: z.nullable(z.string()).optional(),
  ownerId: z.nullable(z.string()).optional(),
  size: z.nullable(z.number().int()).optional(),
  createdDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  lastUpdatedDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  owner: CreateWorkspaceDocumentOwner$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    documentId: "document_id",
    ownerId: "owner_id",
    createdDate: "created_date",
    lastUpdatedDate: "last_updated_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceDocumentResponse$ {
  /** @deprecated use `CreateWorkspaceDocumentResponse$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceDocumentResponse$inboundSchema;
  /** @deprecated use `CreateWorkspaceDocumentResponse$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceDocumentResponse$outboundSchema;
  /** @deprecated use `CreateWorkspaceDocumentResponse$Outbound` instead. */
  export type Outbound = CreateWorkspaceDocumentResponse$Outbound;
}

export function createWorkspaceDocumentResponseToJSON(
  createWorkspaceDocumentResponse: CreateWorkspaceDocumentResponse,
): string {
  return JSON.stringify(
    CreateWorkspaceDocumentResponse$outboundSchema.parse(
      createWorkspaceDocumentResponse,
    ),
  );
}

export function createWorkspaceDocumentResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceDocumentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceDocumentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceDocumentResponse' from JSON`,
  );
}
