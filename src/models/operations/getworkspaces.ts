/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkspacesRequest = {
  /**
   * The ID of the account
   */
  accountId: string;
  /**
   * Number of workspaces to return. Defaults to the maximum which is 100
   */
  count?: number | undefined;
  /**
   * Position of the first item in the total results. Defaults to 0
   */
  startPosition?: number | undefined;
};

/** @internal */
export const GetWorkspacesRequest$inboundSchema: z.ZodType<
  GetWorkspacesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  count: z.number().int().optional(),
  start_position: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_position": "startPosition",
  });
});

/** @internal */
export type GetWorkspacesRequest$Outbound = {
  accountId: string;
  count?: number | undefined;
  start_position?: number | undefined;
};

/** @internal */
export const GetWorkspacesRequest$outboundSchema: z.ZodType<
  GetWorkspacesRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspacesRequest
> = z.object({
  accountId: z.string(),
  count: z.number().int().optional(),
  startPosition: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    startPosition: "start_position",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspacesRequest$ {
  /** @deprecated use `GetWorkspacesRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspacesRequest$inboundSchema;
  /** @deprecated use `GetWorkspacesRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspacesRequest$outboundSchema;
  /** @deprecated use `GetWorkspacesRequest$Outbound` instead. */
  export type Outbound = GetWorkspacesRequest$Outbound;
}

export function getWorkspacesRequestToJSON(
  getWorkspacesRequest: GetWorkspacesRequest,
): string {
  return JSON.stringify(
    GetWorkspacesRequest$outboundSchema.parse(getWorkspacesRequest),
  );
}

export function getWorkspacesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspacesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspacesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspacesRequest' from JSON`,
  );
}
