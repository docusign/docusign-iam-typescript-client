/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkspaceUsersRequest = {
  /**
   * The ID of the account
   */
  accountId: string;
  /**
   * The ID of the workspace
   */
  workspaceId: string;
  /**
   * Number of workspace users to return. Defaults to the maximum which is 100.
   */
  count?: number | undefined;
  /**
   * Position of the first item in the total results. Defaults to 0.
   */
  startPosition?: number | undefined;
  /**
   * Returns workspace users filtered by Name and Email
   */
  filter?: string | undefined;
  /**
   * Sorts results. Options are `first_name_asc`, `first_name_desc`, `last_name_asc`, `last_name_desc`, `email_asc`, `email_desc`. Defaults to `last_name_desc`
   */
  sort?: components.GetWorkspaceUsersSortingOption | undefined;
};

/** @internal */
export const GetWorkspaceUsersRequest$inboundSchema: z.ZodType<
  GetWorkspaceUsersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  count: z.number().int().optional(),
  start_position: z.number().int().optional(),
  filter: z.string().optional(),
  sort: components.GetWorkspaceUsersSortingOption$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "start_position": "startPosition",
  });
});

/** @internal */
export type GetWorkspaceUsersRequest$Outbound = {
  accountId: string;
  workspaceId: string;
  count?: number | undefined;
  start_position?: number | undefined;
  filter?: string | undefined;
  sort?: string | undefined;
};

/** @internal */
export const GetWorkspaceUsersRequest$outboundSchema: z.ZodType<
  GetWorkspaceUsersRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceUsersRequest
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  count: z.number().int().optional(),
  startPosition: z.number().int().optional(),
  filter: z.string().optional(),
  sort: components.GetWorkspaceUsersSortingOption$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    startPosition: "start_position",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceUsersRequest$ {
  /** @deprecated use `GetWorkspaceUsersRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceUsersRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceUsersRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceUsersRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceUsersRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceUsersRequest$Outbound;
}

export function getWorkspaceUsersRequestToJSON(
  getWorkspaceUsersRequest: GetWorkspaceUsersRequest,
): string {
  return JSON.stringify(
    GetWorkspaceUsersRequest$outboundSchema.parse(getWorkspaceUsersRequest),
  );
}

export function getWorkspaceUsersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceUsersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceUsersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceUsersRequest' from JSON`,
  );
}
