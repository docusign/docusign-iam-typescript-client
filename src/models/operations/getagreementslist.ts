/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAgreementsListRequest = {
  accountId?: string | null | undefined;
  /**
   * The maximum number of items that can be returned in a single page.
   */
  limit?: number | null | undefined;
  /**
   * An opaque token that helps retrieve the a page of data.
   */
  ctoken?: string | null | undefined;
};

/** @internal */
export const GetAgreementsListRequest$inboundSchema: z.ZodType<
  GetAgreementsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.nullable(
    z.string().default("00000000-0000-0000-0000-000000000000"),
  ),
  limit: z.nullable(z.number().int()).optional(),
  ctoken: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetAgreementsListRequest$Outbound = {
  accountId: string | null;
  limit?: number | null | undefined;
  ctoken?: string | null | undefined;
};

/** @internal */
export const GetAgreementsListRequest$outboundSchema: z.ZodType<
  GetAgreementsListRequest$Outbound,
  z.ZodTypeDef,
  GetAgreementsListRequest
> = z.object({
  accountId: z.nullable(
    z.string().default("00000000-0000-0000-0000-000000000000"),
  ),
  limit: z.nullable(z.number().int()).optional(),
  ctoken: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAgreementsListRequest$ {
  /** @deprecated use `GetAgreementsListRequest$inboundSchema` instead. */
  export const inboundSchema = GetAgreementsListRequest$inboundSchema;
  /** @deprecated use `GetAgreementsListRequest$outboundSchema` instead. */
  export const outboundSchema = GetAgreementsListRequest$outboundSchema;
  /** @deprecated use `GetAgreementsListRequest$Outbound` instead. */
  export type Outbound = GetAgreementsListRequest$Outbound;
}

export function getAgreementsListRequestToJSON(
  getAgreementsListRequest: GetAgreementsListRequest,
): string {
  return JSON.stringify(
    GetAgreementsListRequest$outboundSchema.parse(getAgreementsListRequest),
  );
}

export function getAgreementsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAgreementsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAgreementsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAgreementsListRequest' from JSON`,
  );
}
