/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWorkspaceRequest = {
  /**
   * The ID of the account
   */
  accountId: string;
  /**
   * The details of the workspace to be created including the name
   */
  createWorkspaceBody: components.CreateWorkspaceBody;
};

/** @internal */
export const CreateWorkspaceRequest$inboundSchema: z.ZodType<
  CreateWorkspaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  CreateWorkspaceBody: components.CreateWorkspaceBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateWorkspaceBody": "createWorkspaceBody",
  });
});

/** @internal */
export type CreateWorkspaceRequest$Outbound = {
  accountId: string;
  CreateWorkspaceBody: components.CreateWorkspaceBody$Outbound;
};

/** @internal */
export const CreateWorkspaceRequest$outboundSchema: z.ZodType<
  CreateWorkspaceRequest$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceRequest
> = z.object({
  accountId: z.string(),
  createWorkspaceBody: components.CreateWorkspaceBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createWorkspaceBody: "CreateWorkspaceBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceRequest$ {
  /** @deprecated use `CreateWorkspaceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceRequest$inboundSchema;
  /** @deprecated use `CreateWorkspaceRequest$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceRequest$outboundSchema;
  /** @deprecated use `CreateWorkspaceRequest$Outbound` instead. */
  export type Outbound = CreateWorkspaceRequest$Outbound;
}

export function createWorkspaceRequestToJSON(
  createWorkspaceRequest: CreateWorkspaceRequest,
): string {
  return JSON.stringify(
    CreateWorkspaceRequest$outboundSchema.parse(createWorkspaceRequest),
  );
}

export function createWorkspaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceRequest' from JSON`,
  );
}
