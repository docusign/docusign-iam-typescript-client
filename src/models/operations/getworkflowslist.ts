/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter workflows by their status. If provided, only workflows with the specified status will be returned.
 *
 * @remarks
 * - `active`: Returns only active workflows.
 * - `inactive`: Returns only inactive workflows.
 * - `publishing`: Returns workflows currently being published.
 * - `unpublishing`: Returns workflows currently being unpublished.
 * - `archived`: Returns workflows that have been archived.
 * - `archiving`: Returns workflows currently being archived.
 */
export const Status = {
  Active: "active",
  Inactive: "inactive",
  Publishing: "publishing",
  Unpublishing: "unpublishing",
  Archived: "archived",
  Archiving: "archiving",
} as const;
/**
 * Filter workflows by their status. If provided, only workflows with the specified status will be returned.
 *
 * @remarks
 * - `active`: Returns only active workflows.
 * - `inactive`: Returns only inactive workflows.
 * - `publishing`: Returns workflows currently being published.
 * - `unpublishing`: Returns workflows currently being unpublished.
 * - `archived`: Returns workflows that have been archived.
 * - `archiving`: Returns workflows currently being archived.
 */
export type Status = ClosedEnum<typeof Status>;

export type GetWorkflowsListRequest = {
  /**
   * The unique identifier of the account.
   */
  accountId: string;
  /**
   * Filter workflows by their status. If provided, only workflows with the specified status will be returned.
   *
   * @remarks
   * - `active`: Returns only active workflows.
   * - `inactive`: Returns only inactive workflows.
   * - `publishing`: Returns workflows currently being published.
   * - `unpublishing`: Returns workflows currently being unpublished.
   * - `archived`: Returns workflows that have been archived.
   * - `archiving`: Returns workflows currently being archived.
   */
  status?: Status | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetWorkflowsListRequest$inboundSchema: z.ZodType<
  GetWorkflowsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  status: Status$inboundSchema.optional(),
});

/** @internal */
export type GetWorkflowsListRequest$Outbound = {
  accountId: string;
  status?: string | undefined;
};

/** @internal */
export const GetWorkflowsListRequest$outboundSchema: z.ZodType<
  GetWorkflowsListRequest$Outbound,
  z.ZodTypeDef,
  GetWorkflowsListRequest
> = z.object({
  accountId: z.string(),
  status: Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowsListRequest$ {
  /** @deprecated use `GetWorkflowsListRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkflowsListRequest$inboundSchema;
  /** @deprecated use `GetWorkflowsListRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkflowsListRequest$outboundSchema;
  /** @deprecated use `GetWorkflowsListRequest$Outbound` instead. */
  export type Outbound = GetWorkflowsListRequest$Outbound;
}

export function getWorkflowsListRequestToJSON(
  getWorkflowsListRequest: GetWorkflowsListRequest,
): string {
  return JSON.stringify(
    GetWorkflowsListRequest$outboundSchema.parse(getWorkflowsListRequest),
  );
}

export function getWorkflowsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkflowsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkflowsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkflowsListRequest' from JSON`,
  );
}
