/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PauseNewWorkflowInstancesRequest = {
  /**
   * The unique identifier of the account.
   */
  accountId: string;
  workflowId: string;
};

/** @internal */
export const PauseNewWorkflowInstancesRequest$inboundSchema: z.ZodType<
  PauseNewWorkflowInstancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  workflowId: z.string(),
});

/** @internal */
export type PauseNewWorkflowInstancesRequest$Outbound = {
  accountId: string;
  workflowId: string;
};

/** @internal */
export const PauseNewWorkflowInstancesRequest$outboundSchema: z.ZodType<
  PauseNewWorkflowInstancesRequest$Outbound,
  z.ZodTypeDef,
  PauseNewWorkflowInstancesRequest
> = z.object({
  accountId: z.string(),
  workflowId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PauseNewWorkflowInstancesRequest$ {
  /** @deprecated use `PauseNewWorkflowInstancesRequest$inboundSchema` instead. */
  export const inboundSchema = PauseNewWorkflowInstancesRequest$inboundSchema;
  /** @deprecated use `PauseNewWorkflowInstancesRequest$outboundSchema` instead. */
  export const outboundSchema = PauseNewWorkflowInstancesRequest$outboundSchema;
  /** @deprecated use `PauseNewWorkflowInstancesRequest$Outbound` instead. */
  export type Outbound = PauseNewWorkflowInstancesRequest$Outbound;
}

export function pauseNewWorkflowInstancesRequestToJSON(
  pauseNewWorkflowInstancesRequest: PauseNewWorkflowInstancesRequest,
): string {
  return JSON.stringify(
    PauseNewWorkflowInstancesRequest$outboundSchema.parse(
      pauseNewWorkflowInstancesRequest,
    ),
  );
}

export function pauseNewWorkflowInstancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<PauseNewWorkflowInstancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PauseNewWorkflowInstancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PauseNewWorkflowInstancesRequest' from JSON`,
  );
}
