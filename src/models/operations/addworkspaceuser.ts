/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddWorkspaceUserRequest = {
  /**
   * The ID of the account
   */
  accountId: string;
  /**
   * The ID of the workspace
   */
  workspaceId: string;
  /**
   * The user details
   */
  workspaceUserForCreate?: components.WorkspaceUserForCreate | undefined;
};

/** @internal */
export const AddWorkspaceUserRequest$inboundSchema: z.ZodType<
  AddWorkspaceUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  WorkspaceUserForCreate: components.WorkspaceUserForCreate$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "WorkspaceUserForCreate": "workspaceUserForCreate",
  });
});

/** @internal */
export type AddWorkspaceUserRequest$Outbound = {
  accountId: string;
  workspaceId: string;
  WorkspaceUserForCreate?:
    | components.WorkspaceUserForCreate$Outbound
    | undefined;
};

/** @internal */
export const AddWorkspaceUserRequest$outboundSchema: z.ZodType<
  AddWorkspaceUserRequest$Outbound,
  z.ZodTypeDef,
  AddWorkspaceUserRequest
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  workspaceUserForCreate: components.WorkspaceUserForCreate$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    workspaceUserForCreate: "WorkspaceUserForCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddWorkspaceUserRequest$ {
  /** @deprecated use `AddWorkspaceUserRequest$inboundSchema` instead. */
  export const inboundSchema = AddWorkspaceUserRequest$inboundSchema;
  /** @deprecated use `AddWorkspaceUserRequest$outboundSchema` instead. */
  export const outboundSchema = AddWorkspaceUserRequest$outboundSchema;
  /** @deprecated use `AddWorkspaceUserRequest$Outbound` instead. */
  export type Outbound = AddWorkspaceUserRequest$Outbound;
}

export function addWorkspaceUserRequestToJSON(
  addWorkspaceUserRequest: AddWorkspaceUserRequest,
): string {
  return JSON.stringify(
    AddWorkspaceUserRequest$outboundSchema.parse(addWorkspaceUserRequest),
  );
}

export function addWorkspaceUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddWorkspaceUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddWorkspaceUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddWorkspaceUserRequest' from JSON`,
  );
}
