/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompleteWorkspaceUploadRequestRequest = {
  /**
   * The ID of the account
   */
  accountId: string;
  /**
   * The ID of the workspace
   */
  workspaceId: string;
  /**
   * The ID of the upload request to complete
   */
  uploadRequestId: string;
};

/** @internal */
export const CompleteWorkspaceUploadRequestRequest$inboundSchema: z.ZodType<
  CompleteWorkspaceUploadRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  uploadRequestId: z.string(),
});

/** @internal */
export type CompleteWorkspaceUploadRequestRequest$Outbound = {
  accountId: string;
  workspaceId: string;
  uploadRequestId: string;
};

/** @internal */
export const CompleteWorkspaceUploadRequestRequest$outboundSchema: z.ZodType<
  CompleteWorkspaceUploadRequestRequest$Outbound,
  z.ZodTypeDef,
  CompleteWorkspaceUploadRequestRequest
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  uploadRequestId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompleteWorkspaceUploadRequestRequest$ {
  /** @deprecated use `CompleteWorkspaceUploadRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    CompleteWorkspaceUploadRequestRequest$inboundSchema;
  /** @deprecated use `CompleteWorkspaceUploadRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    CompleteWorkspaceUploadRequestRequest$outboundSchema;
  /** @deprecated use `CompleteWorkspaceUploadRequestRequest$Outbound` instead. */
  export type Outbound = CompleteWorkspaceUploadRequestRequest$Outbound;
}

export function completeWorkspaceUploadRequestRequestToJSON(
  completeWorkspaceUploadRequestRequest: CompleteWorkspaceUploadRequestRequest,
): string {
  return JSON.stringify(
    CompleteWorkspaceUploadRequestRequest$outboundSchema.parse(
      completeWorkspaceUploadRequestRequest,
    ),
  );
}

export function completeWorkspaceUploadRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<CompleteWorkspaceUploadRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompleteWorkspaceUploadRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompleteWorkspaceUploadRequestRequest' from JSON`,
  );
}
