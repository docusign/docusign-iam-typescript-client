/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWorkspaceEnvelopeRequest = {
  /**
   * The ID of the account
   */
  accountId: string;
  /**
   * The ID of the workspace
   */
  workspaceId: string;
  /**
   * The details of the envelope to be created including the list of document IDs to add to the envelope
   */
  workspaceEnvelopeForCreate: components.WorkspaceEnvelopeForCreate;
};

/** @internal */
export const CreateWorkspaceEnvelopeRequest$inboundSchema: z.ZodType<
  CreateWorkspaceEnvelopeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  WorkspaceEnvelopeForCreate:
    components.WorkspaceEnvelopeForCreate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "WorkspaceEnvelopeForCreate": "workspaceEnvelopeForCreate",
  });
});

/** @internal */
export type CreateWorkspaceEnvelopeRequest$Outbound = {
  accountId: string;
  workspaceId: string;
  WorkspaceEnvelopeForCreate: components.WorkspaceEnvelopeForCreate$Outbound;
};

/** @internal */
export const CreateWorkspaceEnvelopeRequest$outboundSchema: z.ZodType<
  CreateWorkspaceEnvelopeRequest$Outbound,
  z.ZodTypeDef,
  CreateWorkspaceEnvelopeRequest
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  workspaceEnvelopeForCreate:
    components.WorkspaceEnvelopeForCreate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    workspaceEnvelopeForCreate: "WorkspaceEnvelopeForCreate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWorkspaceEnvelopeRequest$ {
  /** @deprecated use `CreateWorkspaceEnvelopeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateWorkspaceEnvelopeRequest$inboundSchema;
  /** @deprecated use `CreateWorkspaceEnvelopeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateWorkspaceEnvelopeRequest$outboundSchema;
  /** @deprecated use `CreateWorkspaceEnvelopeRequest$Outbound` instead. */
  export type Outbound = CreateWorkspaceEnvelopeRequest$Outbound;
}

export function createWorkspaceEnvelopeRequestToJSON(
  createWorkspaceEnvelopeRequest: CreateWorkspaceEnvelopeRequest,
): string {
  return JSON.stringify(
    CreateWorkspaceEnvelopeRequest$outboundSchema.parse(
      createWorkspaceEnvelopeRequest,
    ),
  );
}

export function createWorkspaceEnvelopeRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateWorkspaceEnvelopeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWorkspaceEnvelopeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWorkspaceEnvelopeRequest' from JSON`,
  );
}
