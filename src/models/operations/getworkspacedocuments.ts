/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWorkspaceDocumentsRequest = {
  /**
   * The ID of the account
   */
  accountId: string;
  /**
   * The ID of the workspace
   */
  workspaceId: string;
  /**
   * Number of documents to return. Defaults to the maximum which is 100
   */
  count?: number | undefined;
  /**
   * Position of the first item in the total results. Defaults to 0
   */
  startPosition?: number | undefined;
  /**
   * Filter documents where Name contains the filter. Defaults to null, to not filter
   */
  nameFilter?: string | undefined;
};

/** @internal */
export const GetWorkspaceDocumentsRequest$inboundSchema: z.ZodType<
  GetWorkspaceDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  count: z.number().int().optional(),
  start_position: z.number().int().optional(),
  name_filter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_position": "startPosition",
    "name_filter": "nameFilter",
  });
});

/** @internal */
export type GetWorkspaceDocumentsRequest$Outbound = {
  accountId: string;
  workspaceId: string;
  count?: number | undefined;
  start_position?: number | undefined;
  name_filter?: string | undefined;
};

/** @internal */
export const GetWorkspaceDocumentsRequest$outboundSchema: z.ZodType<
  GetWorkspaceDocumentsRequest$Outbound,
  z.ZodTypeDef,
  GetWorkspaceDocumentsRequest
> = z.object({
  accountId: z.string(),
  workspaceId: z.string(),
  count: z.number().int().optional(),
  startPosition: z.number().int().optional(),
  nameFilter: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startPosition: "start_position",
    nameFilter: "name_filter",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkspaceDocumentsRequest$ {
  /** @deprecated use `GetWorkspaceDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetWorkspaceDocumentsRequest$inboundSchema;
  /** @deprecated use `GetWorkspaceDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetWorkspaceDocumentsRequest$outboundSchema;
  /** @deprecated use `GetWorkspaceDocumentsRequest$Outbound` instead. */
  export type Outbound = GetWorkspaceDocumentsRequest$Outbound;
}

export function getWorkspaceDocumentsRequestToJSON(
  getWorkspaceDocumentsRequest: GetWorkspaceDocumentsRequest,
): string {
  return JSON.stringify(
    GetWorkspaceDocumentsRequest$outboundSchema.parse(
      getWorkspaceDocumentsRequest,
    ),
  );
}

export function getWorkspaceDocumentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetWorkspaceDocumentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetWorkspaceDocumentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetWorkspaceDocumentsRequest' from JSON`,
  );
}
