/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { IamClientError } from "./iamclienterror.js";

/**
 * The error response object for the Workspaces API
 */
export type ErrorDetailsData = {
  /**
   * A brief message describing the error condition
   */
  message?: string | null | undefined;
  /**
   * A standardized code that generalizes the specific error
   */
  errorCode?: string | null | undefined;
};

/**
 * The error response object for the Workspaces API
 */
export class ErrorDetails extends IamClientError {
  /**
   * A standardized code that generalizes the specific error
   */
  errorCode?: string | null | undefined;

  /** The original data that was passed to this error instance. */
  data$: ErrorDetailsData;

  constructor(
    err: ErrorDetailsData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.errorCode != null) this.errorCode = err.errorCode;

    this.name = "ErrorDetails";
  }
}

/** @internal */
export const ErrorDetails$inboundSchema: z.ZodType<
  ErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.nullable(z.string()).optional(),
  error_code: z.nullable(z.string()).optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "error_code": "errorCode",
    });

    return new ErrorDetails(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ErrorDetails$Outbound = {
  message?: string | null | undefined;
  error_code?: string | null | undefined;
};

/** @internal */
export const ErrorDetails$outboundSchema: z.ZodType<
  ErrorDetails$Outbound,
  z.ZodTypeDef,
  ErrorDetails
> = z.instanceof(ErrorDetails)
  .transform(v => v.data$)
  .pipe(
    z.object({
      message: z.nullable(z.string()).optional(),
      errorCode: z.nullable(z.string()).optional(),
    }).transform((v) => {
      return remap$(v, {
        errorCode: "error_code",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorDetails$ {
  /** @deprecated use `ErrorDetails$inboundSchema` instead. */
  export const inboundSchema = ErrorDetails$inboundSchema;
  /** @deprecated use `ErrorDetails$outboundSchema` instead. */
  export const outboundSchema = ErrorDetails$outboundSchema;
  /** @deprecated use `ErrorDetails$Outbound` instead. */
  export type Outbound = ErrorDetails$Outbound;
}
