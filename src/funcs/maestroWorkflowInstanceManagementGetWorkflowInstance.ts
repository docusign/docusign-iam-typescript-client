/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { IamClientCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { IamClientError } from "../models/errors/iamclienterror.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Retrieve a Workflow Instance
 *
 * @remarks
 * This operation retrieves a single Maestro workflow instance by its unique identifier (`id`).
 * It returns the primary details of the workflow instance, including its name, status,
 * starting information, and other metadata.
 *
 * The response provides key details that help users understand the current state of the workflow
 * instance, when it was started, and who initiated it. Additional metadata is included to support
 * auditing and reporting within the system.
 *
 * ### Use Cases:
 * - Getting the details of a specific workflow instance for further processing or review
 * - Monitoring the status of a running workflow instance to determine completion or cancellation
 * - Accessing metadata for auditing, logging, or reporting on a single workflow instance
 *
 * ### Key Features:
 * - **Single Workflow Instance**: Provides direct access to a specific workflow instance by `id`
 * - **Detailed Status Information**: Includes the workflow's start and end times, status, and other lifecycle timestamps
 * - **Metadata for Tracking**: Useful metadata like who initiated the workflow (`started_by`) and versioning details
 * - **Future-Proof**: Designed to be extensible if additional fields or nested information are required over time
 */
export function maestroWorkflowInstanceManagementGetWorkflowInstance(
  client: IamClientCore,
  request: operations.GetWorkflowInstanceRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.WorkflowInstance,
    | errors.ErrorT
    | IamClientError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: IamClientCore,
  request: operations.GetWorkflowInstanceRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.WorkflowInstance,
      | errors.ErrorT
      | IamClientError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.GetWorkflowInstanceRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    accountId: encodeSimple("accountId", payload.accountId, {
      explode: false,
      charEncoding: "percent",
    }),
    instanceId: encodeSimple("instanceId", payload.instanceId, {
      explode: false,
      charEncoding: "percent",
    }),
    workflowId: encodeSimple("workflowId", payload.workflowId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/v1/accounts/{accountId}/workflows/{workflowId}/instances/{instanceId}",
  )(pathParams);

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.accessToken);
  const securityInput = secConfig == null ? {} : { accessToken: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "getWorkflowInstance",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.accessToken,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 5000,
          exponent: 1.5,
          maxElapsedTime: 30000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["5XX", "429"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.WorkflowInstance,
    | errors.ErrorT
    | IamClientError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, components.WorkflowInstance$inboundSchema),
    M.jsonErr([400, 403, 404], errors.ErrorT$inboundSchema),
    M.jsonErr(500, errors.ErrorT$inboundSchema),
    M.fail([401, "4XX"]),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
