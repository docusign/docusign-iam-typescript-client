/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { IamClientCore } from "../core.js";
import { encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import { IamClientError } from "../models/errors/iamclienterror.js";
import * as errors from "../models/errors/index.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Retrieve trigger requirements for a specific Maestro workflow
 *
 * @remarks
 * This operation retrieves the configuration and input requirements necessary to trigger a specific
 * Maestro workflow. It provides detailed information about the `trigger_event_type`, such as HTTP
 * or other supported types, and specifies the required input schema, including field names, data types,
 * and any default values.
 *
 * This information is essential for understanding the data and parameters required to initiate the
 * workflow. It enables developers to prepare the necessary inputs and configuration before triggering
 * the workflow instance, ensuring seamless execution and compliance with workflow requirements.
 *
 * ### Use Cases:
 * - Identifying the required input fields and their data types to successfully trigger the workflow.
 * - Reviewing the trigger configuration for validation and compliance with expected input.
 * - Preparing and validating data in advance of triggering the workflow, minimizing runtime errors.
 *
 * ### Key Features:
 * - **Detailed Trigger Input Requirements**: Provides an exhaustive schema of required fields,
 *
 *   their data types, and optional default values for easy reference and data validation.
 * - **Trigger Event Type Information**: Specifies the type of event required to initiate the workflow
 *
 *   (e.g., HTTP), helping developers configure their systems to invoke the workflow appropriately.
 * - **Configurable for Custom Triggers**: Suitable for custom configurations, enabling flexibility
 *
 *   in how workflows can be triggered according to system needs.
 */
export function maestroWorkflowsGetWorkflowTriggerRequirements(
  client: IamClientCore,
  request: operations.GetWorkflowTriggerRequirementsRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    components.WorkflowTriggerRequirementsSuccess,
    | errors.ErrorT
    | IamClientError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: IamClientCore,
  request: operations.GetWorkflowTriggerRequirementsRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      components.WorkflowTriggerRequirementsSuccess,
      | errors.ErrorT
      | IamClientError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.GetWorkflowTriggerRequirementsRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const pathParams = {
    accountId: encodeSimple("accountId", payload.accountId, {
      explode: false,
      charEncoding: "percent",
    }),
    workflowId: encodeSimple("workflowId", payload.workflowId, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc(
    "/v1/accounts/{accountId}/workflows/{workflowId}/trigger-requirements",
  )(pathParams);

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.accessToken);
  const securityInput = secConfig == null ? {} : { accessToken: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "GetWorkflowTriggerRequirements",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.accessToken,
    retryConfig: options?.retries
      || client._options.retryConfig
      || {
        strategy: "backoff",
        backoff: {
          initialInterval: 500,
          maxInterval: 5000,
          exponent: 1.5,
          maxElapsedTime: 30000,
        },
        retryConnectionErrors: true,
      }
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["5XX", "429"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "404", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    components.WorkflowTriggerRequirementsSuccess,
    | errors.ErrorT
    | IamClientError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, components.WorkflowTriggerRequirementsSuccess$inboundSchema),
    M.jsonErr([400, 403, 404], errors.ErrorT$inboundSchema),
    M.jsonErr(500, errors.ErrorT$inboundSchema),
    M.fail([401, "4XX"]),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
